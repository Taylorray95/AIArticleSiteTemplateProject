@page "/Account/Manage/ManageProfile"
@rendermode InteractiveServer
@attribute [StreamRendering(true)] 
@inject AuthenticationStateProvider AuthenticationStateProvider 
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using AIArticleSiteTemplateProject.Data
@using AIArticleSiteTemplateProject.Services
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@inject BlobServiceClientWrapper BlobServiceClientWrapper
@inject NavigationManager NavigationManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>

<style>



    .btn {
        flex: 1; /* makes the buttons expand equally to fill the wrapper */
        margin: 5px; /* adds space between the buttons */
    }


</style>

@if (showError == true)
{
    <div class="text-danger">@statusMessage</div>
}

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                @* <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" /> *@
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>

    <br />
    <br />
    <h2>Profile Photo</h2>
    <br />
    <div class="col-md-6">
        @if (showError && !string.IsNullOrEmpty(statusMessage))
        {
            <div class="text-danger">@statusMessage</div>
        }
        @if (!showError && !string.IsNullOrEmpty(statusMessage))
        {
            <div class="text-success">@statusMessage</div>
        }
        <div class="form-floating mb-3">
        <img id="profile-photo" src="@imageUrl" alt="Profile Photo" style="width:200px;margin-bottom:10px;" />
        <InputFile OnChange="OnInputFileChange" class="form-control" />

        </div>

        <div class="button-wrapper">
        
        <button @onclick="SavePhoto" class="w-100 btn btn-lg btn-primary">Save New Photo</button>
        <button @onclick="ResetPhoto" class="w-100 btn btn-lg btn-danger">Delete Photo</button>

        </div>
    </div>
</div>


@code {
    private string statusMessage = "";
    private bool showError = false;
    private ApplicationUser? user = default!;
    private string? username;
    private string? phoneNumber;
    private string? imageUrl;
    private IBrowserFile? selectedFile;



    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var identityUser = authState.User;
        user = await UserManager.GetUserAsync(identityUser);
        imageUrl = user!.ProfilePhoto ?? "https://newshog.blob.core.windows.net/profile-photos/default.png";
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);
        Input.PhoneNumber ??= phoneNumber;
    }
    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user!, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                statusMessage = "Error: Failed to set phone number.";
                showError = true;
                return; 
            }
        }

        await SignInManager.RefreshSignInAsync(user!);
        statusMessage = "Your profile has been updated";
        showError = false;
        StateHasChanged();
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        // [MinLength(10, ErrorMessage = "Phone number must be at least 10 digits.")]
        [RegularExpression(@"^\d{10,}$", ErrorMessage = "Phone number must be at least 10 digits.")]
        public string? PhoneNumber { get; set; }
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            selectedFile = file; 

            try
            {
                using var stream = file.OpenReadStream();
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var buffer = memoryStream.ToArray();

                var base64Image = $"data:image/jpeg;base64,{Convert.ToBase64String(buffer)}";
                imageUrl = base64Image;
                StateHasChanged();
            }
            catch (Exception)
            {

            }
        }
    }


    private async Task SavePhoto()
    {
        StateHasChanged();

        try
        {
            if (selectedFile != null)
            {
                var blobContainer = BlobServiceClientWrapper.GetBlobContainerClient("profile-photos");

                //delete old photo if it isn't the 'default' photo 
                if (!string.IsNullOrEmpty(user!.ProfilePhoto) && user.ProfilePhoto != "https://newshog.blob.core.windows.net/profile-photos/default.png")
                {
                    // Extract blob name from the URL and delete the old photo
                    var oldBlobName = new Uri(user.ProfilePhoto).Segments.Last();
                    var oldBlobClient = blobContainer.GetBlobClient(oldBlobName);
                    await oldBlobClient.DeleteIfExistsAsync();
                }

                var blobClient = blobContainer.GetBlobClient(Guid.NewGuid().ToString() + Path.GetExtension(selectedFile.Name));

                await using var stream = selectedFile.OpenReadStream();
                await blobClient.UploadAsync(stream, overwrite: true);

                user.ProfilePhoto = blobClient.Uri.AbsoluteUri;
                await UserManager.UpdateAsync(user);
                imageUrl = user.ProfilePhoto;

                statusMessage = "Profile photo updated successfully.";
                showError = false;
            }
        }
        catch (Exception Ex)
        {
            Console.WriteLine(Ex.ToString());
            statusMessage = "Error updating profile photo";
            showError = true;
        }
    }

    private async Task ResetPhoto()
    {
        try
        {
            user!.ProfilePhoto = "https://newshog.blob.core.windows.net/profile-photos/default.png";
            await UserManager.UpdateAsync(user);
            imageUrl = user.ProfilePhoto;
            statusMessage = "Profile photo reset to default.";
            showError = false;
        }
        catch (Exception ex)
        {
            statusMessage = $"Error resetting profile photo: {ex.Message}";
            showError = true;
        }
        StateHasChanged();
    }
}
