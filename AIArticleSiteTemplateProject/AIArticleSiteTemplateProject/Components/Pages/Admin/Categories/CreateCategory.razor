@page "/admin/categories/createcategory"
@using AIArticleSiteTemplateProject.Data
@using AIArticleSiteTemplateProject.Objects
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<NavLink class="btn btn-link" href="/admin/categories/">Go Back To Category Administration</NavLink>

@if (!string.IsNullOrEmpty(validationMessage))
{
    <div class="alert alert-info">@validationMessage</div>
}

<EditForm Model = "@newCategory" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="categoryName">Category Name:</label>
        <InputText id="categoryName" class="form-control" @bind-Value="newCategory.CategoryName" />
    </div>

    <div class="form-group">
        <label for="categoryDesc">Category Desc:</label>
        <InputText id="categoryDesc" class="form-control" @bind-Value="newCategory.CategoryDesc" />
    </div>

    <div class="form-group">
        <label for="categoryHashTag">Category HashTag (#example):</label>
        <InputText id="categoryHashTag" class="form-control" @bind-Value="newCategory.CategoryHashTag" />
    </div>

    <div class="form-group">
        <label for="categoryStatus">Category Active/Inactive:</label>
        <InputCheckbox id="categoryStatus" @bind-Value="isActiveFlag" ></InputCheckbox>
    </div>

    <button type="submit" class="btn btn-primary">Create Category</button>

    </EditForm>

@code{
    private Category newCategory =  new Category();
    private bool isLoading = true;
    private string validationMessage = "";
    private bool isActiveFlag = true;

    protected override void OnInitialized()
    {

    }


    private async Task HandleValidSubmit()
    {
        try
        {
            newCategory.isActiveFlag = isActiveFlag;
            DbContext.Categories.Add(newCategory);
            await DbContext.SaveChangesAsync();
            validationMessage = "Successfully added the new category.";

            await Task.Delay(1000);

            NavigationManager.NavigateTo("/admin/categories/");

            return;
        }
        catch (DbUpdateException ex)
        {
            validationMessage = "An error occurred while updating the database.";
            Console.WriteLine("An error occurred while updating the database: " + ex.Message);
            if (ex.InnerException != null)
            {
                Console.WriteLine("Inner exception: " + ex.InnerException.Message);
            }
        }
        catch (Exception ex)
        {
            validationMessage = "An error occurred during submission.";
            Console.WriteLine("An error occurred: " + ex.ToString());
        }

    }

    private void ClearForm()
    {
        newCategory = new Category();
    }




}