@page "/admin/posts"
@using AIArticleSiteTemplateProject.Data
@using AIArticleSiteTemplateProject.Objects
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore




@if (!isLoading)
{
    <NavLink class="btn btn-link" href="/admin/posts/createpost">Create a Post</NavLink>

    <br />
    @if (categories != null)
    {
        @foreach (var category in categories)
        {
            @if (category.isActiveFlag == true)
            { 
            <button @onclick="() => FilterByCategory(category.CategoryId)">@category.CategoryName</button>
            }
        }
    }

    <table class="table">
        <thead>
            <tr>
                <th>Post ID</th>
                <th>Category</th>
                <th>Short Title</th>
                <th>Title</th>
                <th>Posted Date</th>
                <th>Last Updated</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in posts)
            {
                <tr>
                    <td>@post.PostId</td>
                    <td>@post.Category?.CategoryName</td> 
                    <td>@post.PostShortTitle</td>
                    <td>@post.PostTitle</td>
                    <td>@post.PostSysDate?.ToString("g")</td>
                    <td>@post.PostLastUpdated?.ToString("g")</td>
                    <td>
                        <button @onclick="() => ViewPost(post.PostId)">View</button>
                        <button @onclick="() => EditPost(post.PostId)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(_currentPage == 1)">Previous</button>
        <span>Page @_currentPage of @_totalPages</span>
        <button @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Next</button>
    </div>
}
else
{
    <div>Loading..</div>
}

@code {
    private List<Post>? posts;
    private List<Category>? categories;
    private int _currentPage = 1;
    private const int PageSize = 50;
    private int _totalPages = 0;
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            categories = await DbContext.Categories.ToListAsync();
            await LoadPosts();
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task LoadPosts(int? categoryId = null)
    {
        var query = DbContext.Posts.Include(p => p.Category).AsQueryable();

        if (categoryId.HasValue)
        {
            query = query.Where(p => p.CategoryId == categoryId.Value);
        }

        var totalPosts = await query.CountAsync();
        _totalPages = (int)Math.Ceiling(totalPosts / (double)PageSize);
        posts = await query.Skip((PageSize * (_currentPage - 1))).Take(PageSize).ToListAsync();
    }


    private async Task FilterByCategory(int categoryId)
    {
        _currentPage = 1;
        await LoadPosts(categoryId);
    }


    private async Task NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
            await LoadPosts();
        }
    }

    private async Task PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
            await LoadPosts();
        }
    }

    private void ViewPost(int postId)
    {
        NavigationManager.NavigateTo($"/admin/posts/view/{postId}");
    }

    private void EditPost(int postId)
    {
        NavigationManager.NavigateTo($"/admin/posts/edit/{postId}");
    }

    private void DeletePost(int postId)
    {
        
    }
}
