@page "/admin/posts/edit/{PostId:int}"

@using AIArticleSiteTemplateProject.Data
@using AIArticleSiteTemplateProject.Objects
@rendermode InteractiveServer
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@using AIArticleSiteTemplateProject.Components.Reusable
@inject IJSRuntime JSRuntime
@inject CDNServerManager cdnServerManager

@if (!string.IsNullOrEmpty(validationMessage))
{
    <div class="alert alert-info">@validationMessage</div>
}
<br />


<ConfirmationDialog @ref="confirmationDialog" ConfirmationChanged="OnConfirmationChanged" />

@if (!isLoading)
{
    <EditForm Model="post" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="postTitle">Post Title:</label>
            <InputTextArea  id="postTitle" class="form-control" @bind-Value="post!.PostTitle" />
        </div>

        <div class="form-group">
            <label for="postShortTitle">Post Short Title:</label>
            <InputTextArea  id="postShortTitle" class="form-control" @bind-Value="post.PostShortTitle" />
        </div>

        <div class="form-group">
            <label for="postBody">Post Body:</label>
            <InputTextArea  id="postBody" rows="10" class="form-control" @bind-Value="post.PostBody" />
        </div>

        <div class="form-group">
            <label for="postCategory">Category:</label>
            <InputSelect id="postCategory" class="form-control" @bind-Value="post.CategoryId">
                <option value="">Select a Category</option>
                @if (categories != null)
                {
                    @foreach (var category in categories)
                    {
                        @if (category.isActiveFlag)
                        { 
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    }
                }
                
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="postStatus">Post Status:</label>
            <InputSelect id="postStatus" class="form-control" @bind-Value="post.StatusId">
                <option value="">Select a Post Status</option>
                @foreach (var status in postStatuses!)
                {
                    <option value="@status.Id">@status.StatusName</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="postSysDate">Post Date:</label>
            <InputDate id="postSysDate" class="form-control" @bind-Value="post.PostSysDate" />
        </div>

        <div class="form-group">
            <label for="postLastUpdated">Last Updated:</label>
            <InputDate id="postLastUpdated" class="form-control"  @bind-Value="post.PostLastUpdated" />
        </div>

        @* Header Image *@
        <div class="form-group">
            <label for="headerImageOption">Header Image Option:</label>
            <InputSelect id="headerImageOption" class="form-control" @bind-Value="headerImageOption">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (headerImageOption == "link")
        {
            <div class="form-group">
                <label for="headerImage">Header Image Link:</label>
                <InputText id="headerImage" class="form-control" @bind-Value="post.HeaderImage" @oninput="@(() => OnImageFieldChanged(headerImageOption, nameof(post.HeaderImageIsExternalLinkFlag), nameof(post.HeaderImageIDIfNotExternalLink), nameof(post.HeaderImage)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="headerImageUpload">Header Image Upload:</label>
                <InputFile id="headerImageUpload" OnChange="UploadHeaderImageAsync" />
            </div>
        }

        @* Body Image *@
        <div class="form-group">
            <label for="bodyImageOption">Body Image Option:</label>
            <InputSelect id="bodyImageOption" class="form-control" @bind-Value="bodyImageOption">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (bodyImageOption == "link")
        {
            <div class="form-group">
                <label for="bodyImage">Body Image Link:</label>
                <InputText id="bodyImage" class="form-control" @bind-Value="post.BodyImage" @oninput="@(() => OnImageFieldChanged(bodyImageOption, nameof(post.BodyImageIsExternalLinkFlag), nameof(post.BodyImageIDIfNotExternalLink), nameof(post.BodyImage)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="bodyImageUpload">Body Image Upload:</label>
                <InputFile id="bodyImageUpload" OnChange="UploadBodyImageAsync" />
            </div>
        }

        @* Image 3 *@
        <div class="form-group">
            <label for="image3Option">Image 3 Option:</label>
            <InputSelect id="image3Option" class="form-control" @bind-Value="image3Option">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (image3Option == "link")
        {
            <div class="form-group">
                <label for="image3">Image 3 Link:</label>
                <InputText id="image3" class="form-control" @bind-Value="post.Image3" @oninput="@(() => OnImageFieldChanged(image3Option, nameof(post.Image3IsExternalLinkFlag), nameof(post.Image3ImageIDIfNotExternalLink), nameof(post.Image3)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="image3Upload">Image 3 Upload:</label>
                <InputFile id="image3Upload" OnChange="UploadImage3Async" />
            </div>
        }

        @* Image 4 *@
        <div class="form-group">
            <label for="image4Option">Image 4 Option:</label>
            <InputSelect id="image4Option" class="form-control" @bind-Value="image4Option">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (image4Option == "link")
        {
            <div class="form-group">
                <label for="image4">Image 4 Link:</label>
                <InputText id="image4" class="form-control" @bind-Value="post.Image4" @oninput="@(() => OnImageFieldChanged(image4Option, nameof(post.Image4IsExternalLinkFlag), nameof(post.Image4ImageIDIfNotExternalLink), nameof(post.Image4)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="image4Upload">Image 4 Upload:</label>
                <InputFile id="image4Upload" OnChange="UploadImage4Async" />
            </div>
        }

        <div class="form-group">
            <label for="totalComments">Total Comments:</label>
            <InputText id="totalComments" class="form-control" @bind-Value="totalCommentsText"  />
        </div>

        <div class="form-group">
            <label for="pageViews">Page Views:</label>
            <InputText id="pageViews" class="form-control" @bind-Value="pageViewsText"  />
        </div>


        <h3>Articles Parsed</h3>
        @foreach (var articleParsed in articlesParsed)
        {
            <div>
                <InputText @bind-Value="articleParsed.SourceUrl" placeholder="Source URL" />
                <InputText @bind-Value="articleParsed.SourceTitle" placeholder="Source Title" />
                <button @onclick="() => RemoveArticleParsed(articleParsed)">Remove</button>
            </div>
        }
        <button @onclick="AddArticleParsed" type="button">Add Article</button>
        <br /><br />
        <button type="submit" class="btn btn-primary">Update Post</button>
        <button  type="button" class="btn btn-danger" @onclick="ShowDeleteConfirmation">Delete Post</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int PostId { get; set; }

    private Post? post;
    private List<Category>? categories;
    private List<PostStatus>? postStatuses;
    private List<ArticleParsed> articlesParsed = new List<ArticleParsed>();
    private ConfirmationDialog? confirmationDialog;
    private string validationMessage = "";
    private bool isLoading = true;

    private string? totalCommentsText;
    private string? pageViewsText;

    private string headerImageOption = "link";
    private string bodyImageOption = "link";
    private string image3Option = "link";
    private string image4Option = "link";

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        categories = await DbContext.Categories.ToListAsync();
        postStatuses = await DbContext.PostStatuses.ToListAsync();
        post = await DbContext.Posts
                                .Include(p => p.Category)
                                .Include(p => p.PostStatus)
                                .FirstOrDefaultAsync(p => p.PostId == PostId);

        if (post != null)
        {
            articlesParsed = await DbContext.ArticleParsed
                                            .Where(ap => ap.PostId == post.PostId)
                                            .ToListAsync();

            // Initialize image options based on existing data
            headerImageOption = post.HeaderImageIsExternalLinkFlag.GetValueOrDefault() ? "link" : "upload";
            bodyImageOption = post.BodyImageIsExternalLinkFlag.GetValueOrDefault() ? "link" : "upload";
            image3Option = post.Image3IsExternalLinkFlag.GetValueOrDefault() ? "link" : "upload";
            image4Option = post.Image4IsExternalLinkFlag.GetValueOrDefault() ? "link" : "upload";
        }
        else
        {
            NavigationManager.NavigateTo("/admin/");
        }
        isLoading = false;
    }

    protected override void OnParametersSet()
    {
        totalCommentsText = post!.TotalComments?.ToString() ?? "";
        pageViewsText = post.PageViews?.ToString() ?? "";
    }
    private void AddArticleParsed()
    {
        articlesParsed.Add(new ArticleParsed { PostId = PostId });
    }

    private void RemoveArticleParsed(ArticleParsed articleParsed)
    {
        articlesParsed.Remove(articleParsed);
    }

    private async Task HandleValidSubmit()
    {
        if (post != null)
        {
            try
            {
                post.TotalComments = string.IsNullOrWhiteSpace(totalCommentsText)
                                     ? (int?)null
                                     : int.Parse(totalCommentsText);

                post.PageViews = string.IsNullOrWhiteSpace(pageViewsText)
                                 ? (int?)null
                                 : int.Parse(pageViewsText);

                DbContext.Posts.Update(post);
                await DbContext.SaveChangesAsync();

                foreach (var article in articlesParsed)
                {
                    if (article.ArticleParsedId == 0)
                    {
                        DbContext.ArticleParsed.Add(article);
                    }
                    else
                    {
                        DbContext.ArticleParsed.Update(article);
                    }
                }
                await DbContext.SaveChangesAsync();

                validationMessage = "Successfully updated the article.";

                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("scrollToTop");
                await Task.Delay(1000);

                NavigationManager.NavigateTo("/admin/posts");
            }
            catch (Exception ex)
            {
                validationMessage = "Error Updating the article.";
                Console.WriteLine(ex.ToString());
            }
        }
    }

    private void ShowDeleteConfirmation()
    {
        confirmationDialog!.Show("Are you sure you want to delete this post?");
    }

    private async Task OnConfirmationChanged(bool confirmed)
    {
        if (confirmed)
        {
            await DeletePost();
        }
    }

    private async Task DeletePost()
    {
        if (post != null)
        {
            try
            {
                DbContext.Posts.Remove(post);
                await DbContext.SaveChangesAsync();
                NavigationManager.NavigateTo("/admin/posts");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
    }

    private async void OnImageFieldChanged(string imageOption, string isLinkFlagField, string imageIdField, string imageUrlField)
    {
        if (imageOption == "link")
        {
            var imageIdValue = post.GetType().GetProperty(imageIdField).GetValue(post);
            if (imageIdValue != null)
            {
                // Delete the image from the CDN
                await cdnServerManager.DeleteImageAsync("PostImagesFolder", imageIdValue.ToString());
            }

            post.GetType().GetProperty(isLinkFlagField).SetValue(post, true);
            post.GetType().GetProperty(imageIdField).SetValue(post, null);
            post.GetType().GetProperty(imageUrlField).SetValue(post, null);
        }
    }

    private async Task UploadHeaderImageAsync(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.HeaderImage), nameof(post.HeaderImageIDIfNotExternalLink), nameof(post.HeaderImageIsExternalLinkFlag));
    }

    private async Task UploadBodyImageAsync(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.BodyImage), nameof(post.BodyImageIDIfNotExternalLink), nameof(post.BodyImageIsExternalLinkFlag));
    }

    private async Task UploadImage3Async(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.Image3), nameof(post.Image3ImageIDIfNotExternalLink), nameof(post.Image3IsExternalLinkFlag));
    }

    private async Task UploadImage4Async(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.Image4), nameof(post.Image4ImageIDIfNotExternalLink), nameof(post.Image4IsExternalLinkFlag));
    }

    private async Task UploadImageAsync(InputFileChangeEventArgs e, string imageField, string imageIdField, string isLinkFlagField)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                var ms = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(ms);
                var fileBytes = ms.ToArray();

                string fileUUID = await cdnServerManager.UploadImageAsync("PostImagesFolder", fileBytes, true);
                string imageUrl = cdnServerManager.GetFullImageUrl("PostImagesFolder", fileUUID);

                post.GetType().GetProperty(imageField).SetValue(post, imageUrl);
                post.GetType().GetProperty(imageIdField).SetValue(post, fileUUID);
                post.GetType().GetProperty(isLinkFlagField).SetValue(post, false);

                StateHasChanged(); // Ensure the UI updates with the new image URL
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file: {ex.Message}");
            }
        }
    }
}
