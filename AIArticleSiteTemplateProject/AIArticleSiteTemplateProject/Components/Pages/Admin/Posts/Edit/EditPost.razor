@page "/admin/posts/edit/{PostId:int}"

@using AIArticleSiteTemplateProject.Data
@using AIArticleSiteTemplateProject.Objects
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavigationManager
@using AIArticleSiteTemplateProject.Components.Reusable
@inject IJSRuntime JSRuntime


@if (!string.IsNullOrEmpty(validationMessage))
{
    <div class="alert alert-info">@validationMessage</div>
}
<br />


<ConfirmationDialog @ref="confirmationDialog" ConfirmationChanged="OnConfirmationChanged" />

@if (!isLoading)
{
    <EditForm Model="post" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="postTitle">Post Title:</label>
            <InputText id="postTitle" class="form-control" @bind-Value="post.PostTitle" />
        </div>

        <div class="form-group">
            <label for="postShortTitle">Post Short Title:</label>
            <InputText id="postShortTitle" class="form-control" @bind-Value="post.PostShortTitle" />
        </div>

        <div class="form-group">
            <label for="postBody">Post Body:</label>
            <InputText id="postBody" class="form-control" @bind-Value="post.PostShortTitle" />
        </div>

        <div class="form-group">
            <label for="postCategory">Category:</label>
            <InputSelect id="postCategory" class="form-control" @bind-Value="post.CategoryId">
                <option value="">Select a Category</option>
                @if (categories != null)
                {
                    @foreach (var category in categories)
                    {
                        <option value="@category.CategoryId">@category.CategoryDesc</option>
                    }
                }
                
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="postStatus">Post Status:</label>
            <InputSelect id="postStatus" class="form-control" @bind-Value="post.StatusId">
                <option value="">Select a Post Status</option>
                @foreach (var status in postStatuses)
                {
                    <option value="@status.Id">@status.StatusName</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="postSysDate">Post Date:</label>
            <InputDate id="postSysDate" class="form-control" @bind-Value="post.PostSysDate" />
        </div>

        <div class="form-group">
            <label for="postLastUpdated">Last Updated:</label>
            <InputDate id="postLastUpdated" class="form-control"  @bind-Value="post.PostLastUpdated" />
        </div>

        <div class="form-group">
            <label for="headerImage">Header Image:</label>
            <InputText id="headerImage" class="form-control" @bind-Value="post.HeaderImage" />
        </div>

        <div class="form-group">
            <label for="bodyImage">Body Image:</label>
            <InputText id="bodyImage" class="form-control" @bind-Value="post.BodyImage" />
        </div>

        <div class="form-group">
            <label for="Image 3">Image 3:</label>
            <InputText id="Image3" class="form-control" @bind-Value="post.Image3" />
        </div>

        <div class="form-group">
            <label for="Image 4">Image 4:</label>
            <InputText id="Image4" class="form-control" @bind-Value="post.Image4" />
        </div>

        @* <div class="form-group">
            <label for="totalComments">Total Comments:</label>
            <InputText id="totalComments" class="form-control" @bind-Value="post.TotalComments" disabled />
        </div>

        <div class="form-group">
            <label for="pageViews">Page Views:</label>
            <InputText id="pageViews" class="form-control" @bind-Value="post.PageViews" disabled />
        </div> *@


        <h3>Articles Parsed</h3>
        @foreach (var articleParsed in articlesParsed)
        {
            <div>
                <InputText @bind-Value="articleParsed.SourceUrl" placeholder="Source URL" />
                <InputText @bind-Value="articleParsed.SourceTitle" placeholder="Source Title" />
                <button @onclick="() => RemoveArticleParsed(articleParsed)">Remove</button>
            </div>
        }
        <button @onclick="AddArticleParsed" type="button">Add Article</button>
        <br /><br />
        <button type="submit" class="btn btn-primary">Update Post</button>
        <button  type="button" class="btn btn-danger" @onclick="ShowDeleteConfirmation">Delete Post</button>
    </EditForm>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public int PostId { get; set; }

    private Post? post;
    private List<Category>? categories;
    private List<PostStatus>? postStatuses;
    private List<ArticleParsed> articlesParsed = new List<ArticleParsed>();
    private ConfirmationDialog? confirmationDialog;
    private string validationMessage = "";
    private bool isLoading = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            categories = await DbContext.Categories.ToListAsync();
            postStatuses = await DbContext.PostStatuses.ToListAsync();
            post = await DbContext.Posts
                                  .Include(p => p.Category)
                                  .Include(p => p.PostStatus)
                                  .FirstOrDefaultAsync(p => p.PostId == PostId);

            if (post != null)
            {
                articlesParsed = await DbContext.ArticleParsed
                                                .Where(ap => ap.PostId == post.PostId)
                                                .ToListAsync();
            }
            else
            {
                NavigationManager.NavigateTo("/admin/");
            }
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddArticleParsed()
    {
        articlesParsed.Add(new ArticleParsed { PostId = PostId });
    }

    private void RemoveArticleParsed(ArticleParsed articleParsed)
    {
        articlesParsed.Remove(articleParsed);
    }

    private async Task HandleValidSubmit()
    {
        if (post != null)
        {
            try
            {
                DbContext.Posts.Update(post);
                await DbContext.SaveChangesAsync();


                foreach (var article in articlesParsed)
                {
                    if (article.ArticleParsedId == 0)
                    {
                        DbContext.ArticleParsed.Add(article);
                    }
                    else
                    {
                        DbContext.ArticleParsed.Update(article);
                    }
                }
                await DbContext.SaveChangesAsync();

                validationMessage = "Successfully updated the article.";

                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("scrollToTop");
                await Task.Delay(1000);

                NavigationManager.NavigateTo("/admin/");

                
            }
            catch (Exception ex)
            {
                validationMessage = "Error Updating the article.";
                Console.WriteLine(ex.ToString());
            }
        }
    }

    private void ShowDeleteConfirmation()
    {
        confirmationDialog!.Show("Are you sure you want to delete this post?");
    }

    private async Task OnConfirmationChanged(bool confirmed)
    {
        if (confirmed)
        {
            await DeletePost();
        }
    }

    private async Task DeletePost()
    {
        if (post != null)
        {
            try
            {
                DbContext.Posts.Remove(post);
                await DbContext.SaveChangesAsync();
                NavigationManager.NavigateTo("/admin/");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
    }
}
