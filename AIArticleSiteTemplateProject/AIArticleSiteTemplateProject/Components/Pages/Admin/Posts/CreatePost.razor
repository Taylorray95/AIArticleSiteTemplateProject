@page "/admin/posts/createpost"

@using AIArticleSiteTemplateProject.Data
@using AIArticleSiteTemplateProject.Objects
@rendermode InteractiveServer
@attribute [StreamRendering(true)]
@inject ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@inject CDNServerManager cdnServerManager
<NavLink class="btn btn-link" href="/admin/posts/">Go Back To Post Administration</NavLink>

@if (!isLoading)
{
    @if (!string.IsNullOrEmpty(validationMessage))
    {
        <div class="alert alert-info">@validationMessage</div>
    }
<br />

<EditForm Model="@post" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="postTitle">Post Title:</label>
        <InputText id="postTitle" class="form-control" @bind-Value="post.PostTitle" />
    </div>

    <div class="form-group">
        <label for="postShortTitle">Post Short Title:</label>
        <InputText id="postShortTitle" class="form-control" @bind-Value="post.PostShortTitle" />
    </div>

    <div class="form-group">
        <label for="postBody">Post Body:</label>
        <InputTextArea id="postBody" class="form-control" @bind-Value="post.PostBody" />
    </div>

    <div class="form-group">
        <label for="postCategory">Post Category:</label>
        <InputSelect id="postCategory" class="form-control" @bind-Value="post.CategoryId">
            <option value="">Select a Category</option>
            @foreach (var category in categories)
            {
                    @if (category.isActiveFlag)
                    {
                        <option value="@category.CategoryId">@category.CategoryName</option>
                    }
            }
        </InputSelect>
    </div>

        @* Header Image *@
        <div class="form-group">
            <label for="headerImageOption">Header Image Option:</label>
            <InputSelect id="headerImageOption" class="form-control" @bind-Value="headerImageOption">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (headerImageOption == "link")
        {
            <div class="form-group">
                <label for="headerImage">Header Image Link:</label>
                <InputText id="headerImage" class="form-control" @bind-Value="post.HeaderImage" @oninput="@(() => OnImageFieldChanged(headerImageOption, nameof(post.HeaderImageIsExternalLinkFlag), nameof(post.HeaderImageIDIfNotExternalLink)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="headerImageUpload">Header Image Upload:</label>
                <InputFile id="headerImageUpload" OnChange="UploadHeaderImageAsync" />
            </div>
        }

        @* Body Image *@
        <div class="form-group">
            <label for="bodyImageOption">Body Image Option:</label>
            <InputSelect id="bodyImageOption" class="form-control" @bind-Value="bodyImageOption">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (bodyImageOption == "link")
        {
            <div class="form-group">
                <label for="bodyImage">Body Image Link:</label>
                <InputText id="bodyImage" class="form-control" @bind-Value="post.BodyImage" @oninput="@(() => OnImageFieldChanged(bodyImageOption, nameof(post.BodyImageIsExternalLinkFlag), nameof(post.BodyImageIDIfNotExternalLink)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="bodyImageUpload">Body Image Upload:</label>
                <InputFile id="bodyImageUpload" OnChange="UploadBodyImageAsync" />
            </div>
        }

        @* Image 3 *@
        <div class="form-group">
            <label for="image3Option">Image 3 Option:</label>
            <InputSelect id="image3Option" class="form-control" @bind-Value="image3Option">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (image3Option == "link")
        {
            <div class="form-group">
                <label for="image3">Image 3 Link:</label>
                <InputText id="image3" class="form-control" @bind-Value="post.Image3" @oninput="@(() => OnImageFieldChanged(image3Option, nameof(post.Image3IsExternalLinkFlag), nameof(post.Image3ImageIDIfNotExternalLink)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="image3Upload">Image 3 Upload:</label>
                <InputFile id="image3Upload" OnChange="UploadImage3Async" />
            </div>
        }

        @* Image 4 *@
        <div class="form-group">
            <label for="image4Option">Image 4 Option:</label>
            <InputSelect id="image4Option" class="form-control" @bind-Value="image4Option">
                <option value="link">Link</option>
                <option value="upload">Upload</option>
            </InputSelect>
        </div>
        @if (image4Option == "link")
        {
            <div class="form-group">
                <label for="image4">Image 4 Link:</label>
                <InputText id="image4" class="form-control" @bind-Value="post.Image4" @oninput="@(() => OnImageFieldChanged(image4Option, nameof(post.Image4IsExternalLinkFlag), nameof(post.Image4ImageIDIfNotExternalLink)))" />
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="image4Upload">Image 4 Upload:</label>
                <InputFile id="image4Upload" OnChange="UploadImage4Async" />
            </div>
        }

    <div class="form-group">
        <label for="postStatus">Post Status:</label>
        <InputSelect id="postStatus" class="form-control" @bind-Value="post.StatusId">
            <option value="">Select a Post Status</option>
            @foreach (var status in postStatuses)
            {
                <option value="@status.Id">@status.StatusDesc</option>
            }
        </InputSelect>
    </div>

    <div>
        <label>Article(s) Parsed:</label>
        @foreach (var articleParsed in articlesParsed)
        {
            <div class="form-group">
                <label for="sourceUrl">Source URL:</label>
                <InputText id="sourceUrl" class="form-control" @bind-Value="articleParsed.SourceUrl" />
            </div>

            <div class="form-group">
                <label for="sourceTitle">Source Title:</label>
                <InputText id="sourceTitle" class="form-control" @bind-Value="articleParsed.SourceTitle" />
            </div>
        }
        <button @onclick="AddArticleParsed" type="button">Add Article</button>
    </div>


    <button type="submit" class="btn btn-primary">Create Post</button>
    </EditForm>
}
else
{
<div>Loading..</div>    
}

@code {
    private Post post = new Post();
    private List<Category> categories = new List<Category>();
    private List<PostStatus> postStatuses = new List<PostStatus>();
    private List<ArticleParsed> articlesParsed = new List<ArticleParsed>();
    private bool isLoading = true;
    private string validationMessage = "";

    private string headerImageOption = "link";
    private string bodyImageOption = "link";
    private string image3Option = "link";
    private string image4Option = "link";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = true;
            categories = await DbContext.Categories
                                     .Where(c => c.isActiveFlag) 
                                     .ToListAsync();
            postStatuses = await DbContext.PostStatuses.ToListAsync();
            isLoading = false;
            StateHasChanged();
        }
    }

    private void AddArticleParsed()
    {
        articlesParsed.Add(new ArticleParsed());
    }

    private async Task HandleValidSubmit()
    {

        try
        {
            DbContext.Posts.Add(post);
            await DbContext.SaveChangesAsync();

            foreach (var article in articlesParsed)
            {
                article.PostId = post.PostId;
                DbContext.ArticleParsed.Add(article);
            }
            await DbContext.SaveChangesAsync();

            ClearForm();
            validationMessage = "Post submitted successfully";
            return;
        }
        catch (DbUpdateException ex)
        {
            validationMessage = "An error occurred while updating the database.";
            Console.WriteLine("An error occurred while updating the database: " + ex.Message);
            if (ex.InnerException != null)
            {
                Console.WriteLine("Inner exception: " + ex.InnerException.Message);
            }
        }
        catch (Exception ex)
        {
            validationMessage = "An error occurred during submission.";
            Console.WriteLine("An error occurred: " + ex.ToString());
        }
    }

    private void ClearForm()
    {
        post = new Post();
        articlesParsed.Clear();
    }

    private void OnImageFieldChanged(string imageOption, string isLinkFlagField, string imageIdField)
    {
        if (imageOption == "link")
        {
            post.GetType().GetProperty(isLinkFlagField).SetValue(post, true);
            post.GetType().GetProperty(imageIdField).SetValue(post, null);
        }
    }

    private async Task UploadHeaderImageAsync(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.HeaderImage), nameof(post.HeaderImageIDIfNotExternalLink), nameof(post.HeaderImageIsExternalLinkFlag));
    }

    private async Task UploadBodyImageAsync(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.BodyImage), nameof(post.BodyImageIDIfNotExternalLink), nameof(post.BodyImageIsExternalLinkFlag));
    }

    private async Task UploadImage3Async(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.Image3), nameof(post.Image3ImageIDIfNotExternalLink), nameof(post.Image3IsExternalLinkFlag));
    }

    private async Task UploadImage4Async(InputFileChangeEventArgs e)
    {
        await UploadImageAsync(e, nameof(post.Image4), nameof(post.Image4ImageIDIfNotExternalLink), nameof(post.Image4IsExternalLinkFlag));
    }

    private async Task UploadImageAsync(InputFileChangeEventArgs e, string imageField, string imageIdField, string isLinkFlagField)
    {
        var file = e.File;
        if (file != null)
        {
            try
            {
                var ms = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(ms);
                var fileBytes = ms.ToArray();

                string fileUUID = await cdnServerManager.UploadImageAsync("PostImagesFolder", fileBytes, true);
                string imageUrl = cdnServerManager.GetFullImageUrl("PostImagesFolder", fileUUID);

                post.GetType().GetProperty(imageField).SetValue(post, imageUrl);
                post.GetType().GetProperty(imageIdField).SetValue(post, fileUUID);
                post.GetType().GetProperty(isLinkFlagField).SetValue(post, false);

                StateHasChanged(); // Ensure the UI updates with the new image URL
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error uploading file: {ex.Message}");
            }
        }
    }
}