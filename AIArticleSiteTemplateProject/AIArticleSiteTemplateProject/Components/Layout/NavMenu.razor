@* @implements IDisposable *@
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@* @rendermode InteractiveServer
@attribute [StreamRendering(true)] *@

 <div class="top-row ps-3 navbar navbar-dark"> 
    <div class="container-fluid">
        <a class="navbar-brand" href="./">
            <img src="@logoPath" alt="news-hog" style="height:90px; width:auto;" />
</a>


      @*   <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button> 
 *@

    </div>
 </div> 

@* <div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <AuthorizeView>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="/Account/Manage">
                    <span class="oi oi-plus" aria-hidden="true"></span> Manage Account
                </NavLink>
            </div>
        </AuthorizeView>
        <AuthorizeView Roles="SuperAdmin,Admin">
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/admin">
                        <span class="oi oi-wrench" aria-hidden="true"></span> Administer
                    </NavLink>
                </div>
            </Authorized>
        </AuthorizeView>
    </nav>
</div>
*@
@code {
    // private string? currentUrl;

    // private bool collapseNavMenu = true;

    // private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string? logoPath;

     protected override void OnInitialized()
     {
    //     currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        logoPath = Configuration["ApplicationSettings:ApplicationLogoPath"];
    //     NavigationManager.LocationChanged += OnLocationChanged;
     }

    // private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    // {
    //     currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    //     StateHasChanged();
    // }

    // public void Dispose()
    // {
    //     NavigationManager.LocationChanged -= OnLocationChanged;
    // }

    // private void ToggleNavMenu()
    // {
    //     collapseNavMenu = !collapseNavMenu;
    // }
}

