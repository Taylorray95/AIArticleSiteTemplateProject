@inject UserManager<ApplicationUser> UserManager
@inject Services.PostService PostService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
<PageTitle>User Profile</PageTitle>

@if (isLoading)
{
    <div>Loading Comments...</div>
}
else
{
    <div style="color:red;">@valMessageError</div>
    <div style="color:green;">@valMessageSuccess</div>

    @if (userComments != null)
    {
        @if (UserProfile!.UserHasCommentsVisibleOnProfile || AllowDeletion)
        {

             <div class="list-group">

                @if (userComments != null && userComments.Count != 0)
                {
                    @foreach (var comment in userComments)
                    {
                        <div class="list-group-item flex-column align-items-start">
                            <h5 class="mt-2">@comment.Post?.PostTitle</h5>
                            <div class="d-flex w-100 justify-content-between flex-wrap">
                                <p class="mb-1 flex-shrink-1" style="word-wrap: break-word; overflow-wrap: break-word; white-space: pre-wrap;word-break: break-all;">@comment.CommentBody</p>
                                <small>Commented on @comment.CommentSysDate.ToString("g")</small>
                            </div>
                            @if (AllowDeletion)
                            {
                                <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteConfirmation(comment.CommentId)">Delete</button>
                            } 
                        </div>
                    }
                }
                else
                {
                    <div>User has no comment history yet..</div>
                }
            </div>
            <ul class="pagination">
                @for (var i = 1; i <= totalPages; i++)
                {
                    var localPage = i; // Create a local copy of the loop variable or else it will always pass totalPages instead of the actual selected page (because that's what was last stored in memory)
                    <li class="page-item @(localPage == currentPage ? "active" : "")">
                        <button class="page-link" @onclick="() => LoadCommentsPage(localPage)">@localPage</button>
                    </li>
                }
            </ul>
            <ConfirmationDialog @ref="confirmationModal" ConfirmationChanged="OnConfirmation" />
        }
        else
        {
        <div>User's comments are private.</div>    
        }
    }
}
@code {

    [Parameter]
    public ApplicationUser? UserProfile { get; set; }

    [Parameter]
    public bool AllowDeletion { get; set; } = false;

    private List<Comment>? userComments;
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 5;
    private string valMessageError = "";
    private string valMessageSuccess = "";
    private bool isLoading = true;
    private ConfirmationDialog? confirmationModal;
    private int pendingDeleteCommentId;

    protected override async Task OnInitializedAsync()
    {

        if (UserProfile != null)
        {
            await LoadCommentsPage(currentPage);
        }
        else
        {
            valMessageError = "Error loading user profile...";
            valMessageSuccess = "";
        }



        isLoading = false;
    }

    private async Task LoadCommentsPage(int page)
    {
        try
        {

            currentPage = page;

            var commentsQuery = PostService.GetCommentsByUserId(UserProfile!.Id).Include(c => c.Post);

            var totalItems = await commentsQuery.CountAsync();

            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

            var skipAmount = (page - 1) * pageSize;
            var commentsToTake = pageSize;

            userComments = await commentsQuery.Skip(skipAmount).Take(commentsToTake).ToListAsync();

        }
        catch (Exception ex)
        {
            valMessageError = "Error loading comments for user..";
            valMessageSuccess = "";
            Console.WriteLine($"An error occurred while loading comments: {ex.Message}");
        }
    }

    private void ShowDeleteConfirmation(int commentId)
    {
        pendingDeleteCommentId = commentId;
        confirmationModal!.Show($"Are you sure you want to delete this comment?");
    }

    private async Task OnConfirmation(bool confirmed)
    {
        if (confirmed)
        {
            await DeleteComment(pendingDeleteCommentId);
        }
    }

    public async Task DeleteComment(int commentId)
    {
        // var comment = await DbContext.Comments.FindAsync(commentId);
        // if (comment == null)
        // {
        //     return;
        // }

        // DbContext.Comments.Remove(comment);
        // var result = await DbContext.SaveChangesAsync();

        // await PostService.DecrementTotalComments(comment.PostId);

        // if (result > 0)
        // {
        //     await LoadCommentsPage(currentPage);
        //     valMessageSuccess = "Comment deleted successfully.";
        //     valMessageError = "";
        // }
        // else
        // {
        //     valMessageError = "An error occurred while deleting the comment.";
        //     valMessageSuccess = "";
        // }

        try {
            await PostService.DeleteComment(commentId);
            await LoadCommentsPage(currentPage);
            valMessageSuccess = "Comment deleted successfully.";
            valMessageError = "";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
            valMessageError = "An error occurred while deleting the comment.";
            valMessageSuccess = "";
        }
    }


}


