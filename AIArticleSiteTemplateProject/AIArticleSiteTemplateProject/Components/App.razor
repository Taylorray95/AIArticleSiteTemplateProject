<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />
    <link rel="stylesheet" href="app.css" />
   <link rel="stylesheet" href="styling.css" /> 
    <link rel="icon" type="image/png" href="news-hog-logo-transparent.png" />
    <HeadOutlet />
    <script>

        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('form').forEach(form => {
                form.addEventListener('submit', function (event) {
                    if (window.location.pathname === '/') {
                        saveScrollPosition('indexScrollPosition');
                    }
                });
            });

            document.querySelectorAll('.input-dropdown').forEach(input => {
                input.addEventListener('change', function () {
                    if (window.location.pathname === '/') {
                        saveScrollPosition('indexScrollPosition');
                    }
                    this.form.submit();
                });
            });

            restoreScrollPosition('indexScrollPosition');
        });
        function saveScrollPosition(key) {
            localStorage.setItem(key, window.scrollY || document.documentElement.scrollTop);
        }

        function restoreScrollPosition(key) {
            const savedPosition = localStorage.getItem(key);
            if (savedPosition) {
                setTimeout(function () {
                    window.scrollTo(0, parseInt(savedPosition));
                    localStorage.removeItem(key);
                }, 1);
            }
        }


    </script>
    <script>
        window.scrollToElement = (elementId) => {
            let element = document.getElementById(elementId);
            if (element) {
                element.scrollIntoView({ behavior: "smooth" });
            } else {
                console.error('Element not found: ' + elementId);
            }
        };

    </script>
    <script>
        window.scrollToBottom = () => {
            window.scrollTo(0, document.body.scrollHeight);
        }
    </script>
    <script>
        window.initializeCommentListener = () => {
            const maxCommentSize = 750;
            setupCharacterCountListener('commentTextArea', 'valCharCountComments', maxCommentSize);
            setupCharacterCountListener('replyTextArea', 'valCharCountReplys', maxCommentSize);
        };

        function setupCharacterCountListener(textareaId, messageId, maxCommentSize) {
            const textarea = document.getElementById(textareaId);
            const messageElement = document.getElementById(messageId);

            if (textarea && messageElement) {
                console.log('Listener added for:', textareaId);
                textarea.addEventListener('input', () => {
                    const currentLength = textarea.value.length;
                    console.log('Current Length:', currentLength);
                    if (currentLength > maxCommentSize) {
                        console.log('Exceeded max length for:', textareaId);
                        textarea.value = textarea.value.substring(0, maxCommentSize); 
                        messageElement.textContent = `Maximum character limit reached (${maxCommentSize} characters).`;
                    } else {
                        messageElement.textContent = '';
                    }
                });
            } else {
                console.log('Element not found:', textareaId, messageId);
            }
        }
    </script>
    <script>
        function resizeAndCropImage(file, callback) {
            var reader = new FileReader();
            reader.onload = function (e) {
                var img = new Image();
                img.onload = function () {
                    var canvas = document.createElement('canvas');
                    var ctx = canvas.getContext('2d');
                    canvas.width = canvas.height = 400; // Target size

                    // Calculate the position to draw the image at
                    var startX = 0, startY = 0, sideLength = 0;

                    if (img.width > img.height) {
                        // Landscape
                        sideLength = img.height;
                        startX = (img.width - sideLength) / 2;
                    } else {
                        // Portrait
                        sideLength = img.width;
                        startY = (img.height - sideLength) / 2;
                    }

                    ctx.drawImage(img, startX, startY, sideLength, sideLength, 0, 0, 400, 400);
                    callback(canvas.toDataURL()); // Get the data URL of the resized image
                };
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
        }
        document.addEventListener('DOMContentLoaded', () => {
            document.getElementById('profilePhotoUpload').addEventListener('change', (event) => {
                if (event.target.files.length > 0) {
                    var file = event.target.files[0];
                    resizeAndCropImage(file, (resizedDataURL) => {
                        // Call a Blazor method to handle the resized image
                        DotNet.invokeMethodAsync('YourAssemblyName', 'ReceiveResizedImage', resizedDataURL);
                    });
                }
            });
        });

    </script>
</head>

<body>
    <Routes />
  @*   <script src="_framework/blazor.web.js"></script> *@

    <div id="reconnect-modal" style="display: none;"></div>
    <script src="_framework/blazor.web.js" autostart="false"></script>
    <script src="boot.js"></script>
</body>

</html>
